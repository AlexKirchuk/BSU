/*
Задано бинарное дерево. Необходимо проверить,
является ли оно поисковым.Будем предполагать,
что в бинарном поисковом дереве могут быть вершины
с одинаковыми ключами. Тогда, для того,
чтобы дерево было поисковым, должно выполняться
следующее требование: для каждой вершины x
все ключи в левом поддереве вершины x меньше
ключа вершины x, а все ключи в правом поддереве
больше либо равны ключу вершины x.

Input
Первая строка входного файла содержит единственное целое число n
(1 <= n <= 8 * 10^5) – количество вершин в дереве.
Следующая строка содержит одно целое число m (-2^31 <= m <= 2^31 - 1)
– значение в корневой вершине дерева.
В каждой из последующих n - 1 строк через пробелы перечисляются
три параметра m, p и c, которые задают
какую-либо вершину дерева.
m – целое число
(-2^31 <= m <= 2^31 - 1),
значение, записанное в вершине.
p – целое число (1 <= p <= n - 1),
номер строки входного файла, в которой
был задан родитель текущей вершины (нумерация строк с нуля).
Гарантируется, что p меньше, чем номер текущей строки.
c может принимать одно из двух значений `L' или `R'.
Значение `L' указывает на то, что текущая вершина
присоединена к родительской слева, `R' – справа.
Гарантируется, что совокупность всех строк задает
корректное бинарное дерево.

Output
В единственной строке выведите `YES',
если заданное дерево является бинарным деревом поиска,
и `NO' в противном случае.
*/

#include <iostream>
#include <fstream>
#include <vector>

int main()
{
    std::ifstream in("bst.in");
    std::ofstream out("bst.out");

    int n;
    in >> n;

    std::vector<long long> key(n);
    std::vector<int> parent(n, -1);
    std::vector<bool> isLeft(n, false);
    std::vector<long long> low(n), high(n);

    in >> key[0];

    for (int i = 1; i < n; i++)
    {
        int p;
        char c;
        in >> key[i] >> p >> c;
        parent[i] = p - 1;
        isLeft[i] = (c == 'L');
    }

    const long long INF = LLONG_MAX;
    low[0] = -INF;
    high[0] = INF;

    bool ok = true;

    for (int i = 1; i < n; i++)
    {
        int p = parent[i];
        if (isLeft[i])
        {
            low[i] = low[p];
            high[i] = key[p];
        }
        else
        {
            low[i] = key[p];
            high[i] = high[p];
        }

        if (!(low[i] <= key[i] && key[i] < high[i]))
        {
            ok = false;
            break;
        }
    }

    out << (ok ? "YES" : "NO");

    return 0;
}