/*
Дана последовательность из s матриц A1, A2, …, As.
Требуется определить, в каком порядке их следует перемножать,
чтобы число атомарных операций умножения было минимальным.
Матрицы предполагаются совместимыми по отношению
к матричному умножению (т. е. число столбцов матрицы Ai − 1
совпадает с числом строк матрицы Ai).

Будем считать, что произведение матриц — операция,
которая принимает на вход две матрицы размера k × m и m × n
и возвращает матрицу размера k × n,
затратив на это kmn атомарных операций умножения.
(Базовый тип позволяет хранить любой элемент итоговой
и любой возможной промежуточной матрицы,
поэтому умножение двух элементов требует одной атомарной операции.)

Так как перемножение матриц ассоциативно,
итоговая матрица не зависит от порядка
выполнения операций умножения.
Другими словами, нет разницы,
в каком порядке расставляются скобки между множителями,
результат будет один и тот же.

Input
В первой строке задано число s матриц (2 ≤ s ≤ 100).
В последующих s строках заданы размеры матриц:
строка i + 1 содержит через пробел число ni строк
и число mi столбцов матрицы Ai (1 ≤ ni, mi ≤ 100).
Гарантируется, что mi совпадает с ni + 1
для всех индексов i от 1 до s − 1.

Output
Выведите минимальное число атомарных операций умножения,
необходимое для перемножения s матриц.
*/

#include <fstream>
#include <vector>
#include <climits>

long long myMin(long long a, long long b)
{
	return a < b ? a : b;
}

int main()
{
	std::ifstream fin;
	std::ofstream fout;

	fin.open("input.txt");
	fout.open("output.txt");

	long long n;
	fin >> n;

	std::vector<long long> dim(n + 1);

	long long rows, cols;
	for (long long i = 0; i < n; i++)
	{
		fin >> rows >> cols;
		if (i == 0) dim[i] = rows;
		dim[i + 1] = cols;
	}

	std::vector<std::vector<long long>> b(n + 1, std::vector<long long>(n + 1, 0));
	long long j, cost;
	for (long long l = 2; l <= n; l++)
	{
		for (long long i = 1; i <= n - l + 1; i++)
		{
			j = i + l - 1;
			b[i][j] = LLONG_MAX;
			for (long long k = i; k < j; k++)
			{
				cost = b[i][k] + b[k + 1][j] + dim[i - 1] * dim[k] * dim[j];
				b[i][j] = myMin(b[i][j], cost);
			}
		}
	}

	fout << b[1][n];
	return 0;
}