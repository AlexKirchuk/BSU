/*
Дана последовательность из s матриц A1, A2, …, As.
Требуется определить, в каком порядке их следует перемножать,
чтобы число атомарных операций умножения было минимальным.
Матрицы предполагаются совместимыми по отношению
к матричному умножению (т. е. число столбцов матрицы Ai − 1
совпадает с числом строк матрицы Ai).

Будем считать, что произведение матриц — операция,
которая принимает на вход две матрицы размера k × m и m × n
и возвращает матрицу размера k × n,
затратив на это kmn атомарных операций умножения.
(Базовый тип позволяет хранить любой элемент итоговой
и любой возможной промежуточной матрицы,
поэтому умножение двух элементов требует одной атомарной операции.)

Так как перемножение матриц ассоциативно,
итоговая матрица не зависит от порядка
выполнения операций умножения.
Другими словами, нет разницы,
в каком порядке расставляются скобки между множителями,
результат будет один и тот же.

Input
В первой строке задано число s матриц (2 ≤ s ≤ 100).
В последующих s строках заданы размеры матриц:
строка i + 1 содержит через пробел число ni строк
и число mi столбцов матрицы Ai (1 ≤ ni, mi ≤ 100).
Гарантируется, что mi совпадает с ni + 1
для всех индексов i от 1 до s − 1.

Output
Выведите минимальное число атомарных операций умножения,
необходимое для перемножения s матриц.
*/

import java.util.Scanner;

import static java.lang.Math.min;

public class Main {
    public static void main(String[] args) {

        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();

        int[] dim = new int[n + 1];

        int rows, cols;
        for (int i = 0; i < n; i++)
        {
            rows = sc.nextInt();
            cols = sc.nextInt();
            if (i == 0) dim[i] = rows;
            dim[i + 1] = cols;
        }

        long[][] b = new long[n + 1][n + 1];

        long j, cost;
        for (int l = 2; l <= n; l++)
        {
            for (int i = 1; i <= n - l + 1; i++)
            {
                j = i + l - 1;
                b[i][(int)j] = Long.MAX_VALUE;
                for (int k = i; k < j; k++)
                {
                    cost = b[i][k] + b[k + 1][(int)j] + dim[i - 1] * dim[k] * dim[(int)j];
                    b[i][(int)j] = Math.min(b[i][(int)j], cost);
                }
            }
        }

        System.out.print(b[1][n]);
    }
}